knitr::opts_chunk$set(echo = TRUE)
DiagrammeR("
graph LR;
A[Gráficos] -->|tienen| B[Gramática];
A -->|tipo| C[Barra];
A -->|tipo| D[Puntos];
A -->|tipo| E[Lineas];
A -->|tipo| L[Areas];
B -->|son| F[Reglas];
B -->|compuesta por| G[Variables de datos];
B -->|compuesta por| H[Atributos estéticos];
B -->|compuesta por| I[Objetos Geométricos];
F -->|combinan| J[capas]
K[ggplot2] -->|implementa| B
")
library(dplyr)
DiagrammeR("
graph LR;
A[Gráficos] -->|tienen| B[Gramática];
A -->|tipo| C[Barra];
A -->|tipo| D[Puntos];
A -->|tipo| E[Lineas];
A -->|tipo| L[Areas];
B -->|son| F[Reglas];
B -->|compuesta por| G[Variables de datos];
B -->|compuesta por| H[Atributos estéticos];
B -->|compuesta por| I[Objetos Geométricos];
F -->|combinan| J[capas]
K[ggplot2] -->|implementa| B
")
digraph rmarkdown {
library(dplyr)
digraph rmarkdown {
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(dplyr)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(dplyr)
library(ggplot2)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
install.packages("DiagrammeR")
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
install.packages("DiagrammeR")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
my_graphviz <- grViz("digraph{
graph[rankdir = LR]
node[shape = rectangle, style = filled]
A[label = 'Figure']
B[label = 'Analysis.R']
C[label = 'Data.csv']
edge[color = black]
B -> A
C -> B
}")
my_graphviz
install.packages("DiagrammeR")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
digraph rmarkdown {
library(dplyr)
library(ggplot2)
digraph rmarkdown {
library(dplyr)
library(ggplot2)
digraph rmarkdown {
library(dplyr)
library(ggplot2)
digraph rmarkdown {
library(dplyr)
library(ggplot2)
digraph rmarkdown {
library(dplyr)
library(ggplot2)
digraph "dplyr" {
library(dplyr)
library(ggplot2)
digraph "dplyr" {
install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
create_graph() %>%
add_nodes_from_table(table=n,label_col = task) %>%
add_edges_from_table(table=e,from_col = from,to_col = to,from_to_map = label) %>%
set_node_attrs(
node_attr = "shape",
values = "square"
) %>%
render_graph(layout = "tree")
install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
create_graph() %>%
add_nodes_from_table(table=n,label_col = task) %>%
add_edges_from_table(table=e,from_col = from,to_col = to,from_to_map = label) %>%
set_node_attrs(
node_attr = "shape",
values = "square"
) %>%
render_graph(layout = "tree")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
create_graph() %>%
add_nodes_from_table(table=n,label_col = task) %>%
add_edges_from_table(table=e,from_col = from,to_col = to,from_to_map = label) %>%
set_node_attrs(
node_attr = "shape",
values = "square"
) %>%
render_graph(layout = "tree")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
create_graph() %>%
add_nodes_from_table(table=n,label_col = task) %>%
add_edges_from_table(table=e,from_col = from,to_col = to,from_to_map = label) %>%
set_node_attrs(
node_attr = "shape",
values = "square"
) %>%
render_graph(layout = "tree")
install.packages("DiagrammeR")
knitr::opts_chunk$set(echo = TRUE)
install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
create_graph() %>%
add_nodes_from_table(table=n,label_col = task) %>%
add_edges_from_table(table=e,from_col = from,to_col = to,from_to_map = label) %>%
set_node_attrs(
node_attr = "shape",
values = "square"
) %>%
render_graph(layout = "tree")
#install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
grViz("
digraph Random{
graph [layout = circo,
overlap =T,
outputorder = edgesfirst,
bgcolor='white',
splines=line]#controls l type setup
edge[labelfontname='Arial',fontSize=13,color='red',fontcolor='navy']
node [shape = box,style='filled',
fillcolor='indianred4',width=2.5,
fontSize=20,fontcolor='snow',
fontname='Arial']#node shape
a [label = 'A']
b [label = 'B']
c [label='D']
a->b[color='red']
b->c[color='dodgerblue']
}")
The output:
#install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
grViz("
digraph Random{
graph [layout = circo,
overlap =T,
outputorder = edgesfirst,
bgcolor='white',
splines=line]#controls l type setup
edge[labelfontname='Arial',fontSize=13,color='red',fontcolor='navy']
node [shape = box,style='filled',
fillcolor='indianred4',width=2.5,
fontSize=20,fontcolor='snow',
fontname='Arial']#node shape
a [label = 'A']
b [label = 'B']
c [label='D']
a->b[color='red']
b->c[color='dodgerblue']
}")
#install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
grViz("
digraph Random{
graph [layout = circo,
overlap =T,
outputorder = edgesfirst,
bgcolor='white',
splines=line]#controls l type setup
edge[labelfontname='Arial',fontSize=13,color='red',fontcolor='navy']
node [shape = box,style='filled',
fillcolor='indianred4',width=2.5,
fontSize=20,fontcolor='snow',
fontname='Arial']#node shape
a [label = 'Planteamiento de Hipótesis']
b [label = 'B']
c [label = 'D']
e [label='E']
a->b[color='red']
b->c[color='dodgerblue']
}")
#install.packages("DiagrammeR")
library(DiagrammeR)
library(dplyr)
grViz("
digraph Random{
graph [layout = circo,
overlap =T,
outputorder = edgesfirst,
bgcolor='white',
splines=line]#controls l type setup
edge[labelfontname='Arial',fontSize=30,color='red',fontcolor='navy']
node [shape = box,style='filled',
fillcolor='indianred4',width=1.0,
fontSize=20,fontcolor='snow',
fontname='Arial']#node shape
a [label = 'Delito contra:
estado,la colectividad, personas, patrimonio']
b [label = 'Juez especializado:
Ordinarios(civiles y de familia), penal, penal militar, constitucional, de paz,...']
c [label = 'Establece la regla de decisión']
d [label='Recoger las pruebas']
e [label='Tomar la desición']
a->b[color='red']
b->c[color='red']
c->d[color='red']
d->e[color='red']
}")
set.seed(173)# Para que salgan los mismos números aleatorios.
s<- rnorm(500, 0,0.3)#Se generan 500 números aleatorios ditribuidos de manera normal con media 30 y desviación estandar 5.
#x#Para mostrar los números
summary(s)#para sacar mínimo, primer cuartil, mediana, media aritmética, tercer cuartil y máximo.
#para sacar la desviación estandar.
sd(s)
#histograma
hist(s, freq = FALSE,main = "Variable estudiada",ylim=c(0,1),xlim=c(-4,4),xlab = "Variable estudiada", ylab = "Frecuencias",col = "#28B0ED",border = "#27AE60" )
#para mínimo, máximo, mediana, media, cuartiles con sus frecuencias.
# media arítmetica
promedio<-  mean(s)
promedio
#Coeficiente de asimetría de Curtosis.
CC <- mean((s - promedio)^4)/(mean((s - promedio)^2))^(2) - 3
CC
shiny::runApp('C:/Users/USUARIO/Desktop/Aplicación Shiny/Cuarto intento/cuarta_aplicación')
runApp('C:/Users/USUARIO/Desktop/Aplicación Shiny/Cuarto intento/cuarta_aplicación')
